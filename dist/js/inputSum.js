function generateInputCotainer(parent) {
    const inputContainers = parent.querySelectorAll(' .cmp-inputs-container .cmp-input-container');
    inputContainers.forEach((inputContainer, i) => {
        const inputNum = inputContainer.querySelector('.cmp-input-number');
        const removeInput = inputContainer.querySelector('.cmd-remove-input');
        if (inputNum) {
            inputNum.textContent = (i + 1).toString();
        }
        if (removeInput) {
            removeInput.disabled = false;
        }
    });
    if (inputContainers.length == 1) {
        const removeInput = parent.querySelector('.cmd-remove-input');
        if (removeInput) {
            removeInput.disabled = true;
        }
    }
}
function calculateSum(parent) {
    const inputs = parent.querySelectorAll(' .cmp-inputs-container .cmp-input-container input[type="number"]');
    const outputResult = parent.querySelector('output.cmp-result');
    let total = 0;
    inputs.forEach((elem) => total += elem.valueAsNumber);
    if (outputResult) {
        outputResult.value = total.toString();
    }
}
function addInput(parent) {
    const tmpInput = document.querySelector('template#tmp-input');
    if (tmpInput) {
        const fragment = tmpInput.content.cloneNode(true);
        parent.append(fragment);
    }
    generateInputCotainer(parent);
}
//จำเป็นต้อง export มาด้วย
export function createInputSum(sectionContainer) {
    const inputsContainer = sectionContainer.querySelector('.cmp-inputs-container');
    sectionContainer.addEventListener('click', (ev) => {
        const elem = ev.target;
        if (elem.matches('.cmd-add-input')) {
            if (inputsContainer) {
                addInput(inputsContainer);
            }
        }
        else if (elem.matches('.cmd-remove-input')) {
            const inputContainer = elem.closest('.cmp-input-container');
            if (inputContainer) {
                inputContainer.remove();
            }
            generateInputCotainer(sectionContainer);
            calculateSum(sectionContainer);
        }
    });
    if (inputsContainer) {
        inputsContainer.addEventListener('change', (ev) => {
            const elem = ev.target;
            if (elem.matches('input[type="number"]')) {
                calculateSum(sectionContainer);
            }
        });
        addInput(inputsContainer);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRTdW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvaW5wdXRTdW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxxQkFBcUIsQ0FBQyxNQUFtQjtJQUNoRCxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQWUsNkNBQTZDLENBQUMsQ0FBQztJQUM3RyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVDLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQVksbUJBQW1CLENBQUMsQ0FBQztRQUM5RSxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsYUFBYSxDQUFhLG1CQUFtQixDQUFDLENBQUM7UUFDbEYsSUFBRyxRQUFRLEVBQUM7WUFDVixRQUFRLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzNDO1FBQ0QsSUFBSSxXQUFXLEVBQUM7WUFDZCxXQUFXLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUM5QjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBRyxlQUFlLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtRQUM5QixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFhLG1CQUFtQixDQUFDLENBQUM7UUFDMUUsSUFBRyxXQUFXLEVBQUM7WUFDYixXQUFXLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUM3QjtLQUNGO0FBQ0gsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFFLE1BQW9CO0lBQ3pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBVyxrRUFBa0UsQ0FBQyxDQUFDO0lBQ3JILE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQVksbUJBQW1CLENBQUMsQ0FBQztJQUMxRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RELElBQUcsWUFBWSxFQUFDO1FBQ2QsWUFBWSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDdkM7QUFDSCxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsTUFBbUI7SUFDbkMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBYyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzNFLElBQUcsUUFBUSxFQUFDO1FBQ1YsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUF1QixDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDekI7SUFDRCxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBRUQsMEJBQTBCO0FBQzFCLE1BQU0sVUFBVSxjQUFjLENBQUMsZ0JBQTZCO0lBQzFELE1BQU0sZUFBZSxHQUFHLGdCQUFnQixDQUFDLGFBQWEsQ0FBZSx1QkFBdUIsQ0FBQyxDQUFDO0lBRTlGLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1FBQzlDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFvQixDQUFDO1FBRXJDLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ2pDLElBQUcsZUFBZSxFQUFDO2dCQUNqQixRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDM0I7U0FDRjthQUFNLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3pDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQWUsc0JBQXNCLENBQUMsQ0FBQztZQUMxRSxJQUFHLGNBQWMsRUFBQztnQkFDbEIsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ3ZCO1lBQ0QscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUN4QyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNsQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsSUFBRyxlQUFlLEVBQUM7UUFDakIsZUFBZSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQzlDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFvQixDQUFDO1lBQ3JDLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFO2dCQUNyQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUNsQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ3pCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEVUIGZyb20gJy4vZWxlbWVudFR5cGUuanMnO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUlucHV0Q290YWluZXIocGFyZW50OkVULkNvbnRhaW5lcik6IHZvaWR7XG4gIGNvbnN0IGlucHV0Q29udGFpbmVycyA9IHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsPEVULkNvbnRhaW5lcj4oJyAuY21wLWlucHV0cy1jb250YWluZXIgLmNtcC1pbnB1dC1jb250YWluZXInKTtcbiAgaW5wdXRDb250YWluZXJzLmZvckVhY2goKGlucHV0Q29udGFpbmVyLCBpKSA9PiB7XG4gICAgY29uc3QgaW5wdXROdW0gPSBpbnB1dENvbnRhaW5lci5xdWVyeVNlbGVjdG9yPEVULk51bWJlcj4oJy5jbXAtaW5wdXQtbnVtYmVyJyk7XG4gICAgY29uc3QgcmVtb3ZlSW5wdXQgPSBpbnB1dENvbnRhaW5lci5xdWVyeVNlbGVjdG9yPEVULkNvbW1hbmQ+KCcuY21kLXJlbW92ZS1pbnB1dCcpO1xuICAgIGlmKGlucHV0TnVtKXtcbiAgICAgIGlucHV0TnVtLnRleHRDb250ZW50ID0gKGkgKyAxKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAocmVtb3ZlSW5wdXQpe1xuICAgICAgcmVtb3ZlSW5wdXQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmKGlucHV0Q29udGFpbmVycy5sZW5ndGggPT0gMSkge1xuICAgIGNvbnN0IHJlbW92ZUlucHV0ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3I8RVQuQ29tbWFuZD4oJy5jbWQtcmVtb3ZlLWlucHV0Jyk7XG4gICAgaWYocmVtb3ZlSW5wdXQpe1xuICAgICAgcmVtb3ZlSW5wdXQuZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVTdW0gKHBhcmVudDogRVQuQ29udGFpbmVyKTogdm9pZHtcbiAgY29uc3QgaW5wdXRzID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGw8RVQuSW5wdXQ+KCcgLmNtcC1pbnB1dHMtY29udGFpbmVyIC5jbXAtaW5wdXQtY29udGFpbmVyIGlucHV0W3R5cGU9XCJudW1iZXJcIl0nKTtcbiAgY29uc3Qgb3V0cHV0UmVzdWx0ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3I8RVQuT3V0cHV0Pignb3V0cHV0LmNtcC1yZXN1bHQnKTtcbiAgbGV0IHRvdGFsID0gMDtcbiAgaW5wdXRzLmZvckVhY2goKGVsZW0pID0+IHRvdGFsICs9IGVsZW0udmFsdWVBc051bWJlcik7XG4gIGlmKG91dHB1dFJlc3VsdCl7XG4gICAgb3V0cHV0UmVzdWx0LnZhbHVlID0gdG90YWwudG9TdHJpbmcoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJbnB1dChwYXJlbnQ6RVQuQ29udGFpbmVyKTogdm9pZHtcbiAgY29uc3QgdG1wSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEVULlRlbXBsYXRlPigndGVtcGxhdGUjdG1wLWlucHV0Jyk7XG4gIGlmKHRtcElucHV0KXtcbiAgICBjb25zdCBmcmFnbWVudCA9IHRtcElucHV0LmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpIGFzIEVULlRlbXBsYXRlQ29udGVudDtcbiAgICBwYXJlbnQuYXBwZW5kKGZyYWdtZW50KTtcbiAgfVxuICBnZW5lcmF0ZUlucHV0Q290YWluZXIocGFyZW50KTtcbn1cblxuLy/guIjguLPguYDguJvguYfguJnguJXguYnguK3guIcgZXhwb3J0IOC4oeC4suC4lOC5ieC4p+C4olxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUlucHV0U3VtKHNlY3Rpb25Db250YWluZXI6RVQuQ29udGFpbmVyKXtcbiAgY29uc3QgaW5wdXRzQ29udGFpbmVyID0gc2VjdGlvbkNvbnRhaW5lci5xdWVyeVNlbGVjdG9yPEVULkNvbnRhaW5lcj4oJy5jbXAtaW5wdXRzLWNvbnRhaW5lcicpO1xuXG4gIHNlY3Rpb25Db250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXYpID0+IHtcbiAgICAgIGNvbnN0IGVsZW0gPSBldi50YXJnZXQgYXMgRVQuQ29tbWFuZDtcblxuICAgICAgaWYoZWxlbS5tYXRjaGVzKCcuY21kLWFkZC1pbnB1dCcpKSB7XG4gICAgICAgIGlmKGlucHV0c0NvbnRhaW5lcil7XG4gICAgICAgICAgYWRkSW5wdXQoaW5wdXRzQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmKGVsZW0ubWF0Y2hlcygnLmNtZC1yZW1vdmUtaW5wdXQnKSkge1xuICAgICAgICAgIGNvbnN0IGlucHV0Q29udGFpbmVyID0gZWxlbS5jbG9zZXN0PEVULkNvbnRhaW5lcj4oJy5jbXAtaW5wdXQtY29udGFpbmVyJyk7XG4gICAgICAgICAgaWYoaW5wdXRDb250YWluZXIpe1xuICAgICAgICAgIGlucHV0Q29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBnZW5lcmF0ZUlucHV0Q290YWluZXIoc2VjdGlvbkNvbnRhaW5lcik7XG4gICAgICAgICAgY2FsY3VsYXRlU3VtKHNlY3Rpb25Db250YWluZXIpO1xuICAgICAgfVxuICB9KTtcbiAgaWYoaW5wdXRzQ29udGFpbmVyKXtcbiAgICBpbnB1dHNDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW0gPSBldi50YXJnZXQgYXMgRVQuQ29tbWFuZDtcbiAgICAgICAgaWYoZWxlbS5tYXRjaGVzKCdpbnB1dFt0eXBlPVwibnVtYmVyXCJdJykpIHtcbiAgICAgICAgICAgIGNhbGN1bGF0ZVN1bShzZWN0aW9uQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGFkZElucHV0KGlucHV0c0NvbnRhaW5lcik7XG4gICAgfVxuICB9XG4iXX0=